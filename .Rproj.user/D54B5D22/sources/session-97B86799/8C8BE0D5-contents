---
title: 'Final Project: R Reference Guide'
author: "Lina Clifford"
date: "2022-11-29"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# R Reference Guide {.tabset .tabset-pills}

## Loading Data and Packages

### Loading in Packages
The functions library() and require() are used to load in data and packages.
Here's a couple of examples: 

```{r}
# Load in the here package and the palmerpenguins package using the require() function
require(here)
require(palmerpenguins)

# Load in those same two packages, but using the library() function
library(here)
library(palmerpenguins)
```

Note, these only work if the package has been installed or already exists on your machine.


### Loading Data
Loading in data works a little differently: you can use the here() or read.csv() functions. Here() specifies a subfolder within your working directory.
Here are some examples:

```{r}
# Load in the 2021 ginkgo data to create a data frame called ginkgo
ginkgo <- read.csv(here("data", "ginkgo_data_2021.csv"))
```









## Data Structures

### C() function
The function c() combines or concatenates its arguments into a vector (a 1-dimensional data structure consisting of 1 or more elements).

* All of the elements must be of the same type.
- I can’t combine character and numeric types in the same call to c()

Here’s two examples using numeric and character data types:


```{r}
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13, 14)

## Create a vector of characters:
char_vec = c("a", "fish", "data is cool", "tree", "b", "love stats")
```

I can show the contents of a vector by typing the name of the vector, or using the print() function.

```{r}
## Typing the name of the vector into the console prints the contents
num_vec


## The print() function accomplishes the same task:
print(char_vec)

```

### Length() function
The length() function can be used to get the length of a vector, and also set the length.

Here's an example using the num_vec from before
```{r}
#Determine length of num_vec
length(num_vec)
```
### Matrix() function

The matrix() function is used to create a matrix from a given set of values. You can input a data vector, set the number of columns, and set the number of rows.
```{r}
#Create a matrix from the num_vec vector
matrix(num_vec, nrow = 3, ncol = 2)
```

### data.frame() function 

The data.frame() function is used to create a dataframe, which is a fundamental data structure in r. 

The difference between a matrix and a dataframe is that a dataframe allows you to have columns of differing data types (numeric, logical, character, etc.).
```{r}
#Combine char_vec and num_vec
data.frame(char_vec, num_vec)
```

### Using ginkgo data.frame with nrow(), ncol(), and dim()

Nrow(), ncol(), and dim() are each useful in learning more about the data structure of an object.

* nrow() tells number of rows
* ncol() tells number of columns
* dim() tells the dimensions of a data frame and returns the number of rows and columns

```{r}
# use nrow() to figure out how many rows are in the ginkgo data frame
nrow(ginkgo)

# use ncol() to figure out how many columns are in the ginkgo data frame
ncol(ginkgo)

# use dim() to get the dimensions of the ginkgo data frame
dim(ginkgo)
```



## Subsetting
Subsetting data can be done by columns, rows, and positions using the following.

* $ to select an entire column
* [row, column] to subset by position
* subset() function to select portions of a data frame 

### Using $ to subset
```{r}
# subset the site id column from the ginkgo data frame using $
ginkgo$site_id
```


### Using [] to subset
```{r}
# select the first row of the ginkgo data frame using []
ginkgo[1,]

# select the element in row 2, column 3 of the ginkgo data frame using []
ginkgo[2,3]

# select the third column in the ginkgo data frame using []
ginkgo[,3]
```


### Subset() function
```{r}
# select all Adelie species penguin data using subset() function
subset(penguins, species == 'Adelie')
```



## Numerical Data Exploration
Get a sense of your data using the following functions:

* summary() to get summary statistics of the data 
* mean() to get the average of the data
* sd() to calculate the standard deviation of the data

### Summary() function
```{r}
# use summary() function on the ginkgo data frame
summary(ginkgo)
```

### Mean() function
```{r}
# calculate the mean of the max depth data within the ginkgo data frame
mean(ginkgo$max_depth)
```

### sd() function
```{r}
# calculate the standard deviation of the max depth data within the ginkgo data frame
sd(ginkgo$max_depth)
```


## Graphical Data Exploration
To create a scatter plot, use the plot() function with the following arguments

* col = changes the color of symbols and lines
* pch = changes the shape of points
* cex = changes the amount of scaling for text and symbols
* main = changes the title of the plot, make sure to put text in "example"
* xlab = changes the label of the x axis, make sure to put text in "example"
* ylab = changes the label of the y axis, make sure to put text in "example"
* xlim = sets the limits of the x axis
* ylim = sets the limits of the y axis
```{r}
# create a scatterplot of max leaf depth (x) and max leaf width (y) from ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width, col = "blue", pch = 21, cex = 0.5, main = "Scatterplot of Ginkgo Leaf Max Depth and Width", xlab = "Max Leaf Depth (mm)", ylab = "Max Leaf Width (mm)", xlim = c(0, 150), ylim = c(0, 150))
```

To create a histogram, use the hist() function. The breaks argument sets how many bins there are in the histogram.

```{r}
# create a histogram of penguin flipper lengths with 10 bins
hist(penguins$flipper_length_mm, breaks = 10, main = "Histogram of Flipper Lengths", xlab = "Flipper Lengths (cm)", ylab = "Frequency", col = "blue")
```

To create a boxplot, use the boxplot() function.

```{r}
# create a boxplot of ginkgo petiole lengths
boxplot(ginkgo$petiole_length, main = "Boxplot of Petiole Length", ylab = "Petiole Length (mm)")

# create a conditional boxplot of ginkgo max width donditioned on the seeds present column
boxplot(ginkgo$notch_depth, ginkgo$seeds_present, main = "Conditional Boxplot: Notch Depth by Seed Presence", xlab = 'Seed Presence', names = c('no', 'yes'), ylab = "Notch Depth (mm)")
```

You can create panels of plots or histograms using the par() function which divides the window into a grid of plots or histograms. The mfrow argument is then used to specify the number of rows and columns in the graphics gird. 

```{r}
# create a 2x2 grid of 4 histograms
par(mfrow = c(2,2))
hist(ginkgo$max_width, breaks = 5, main = "Histogram of Leaf Max Width", xlab = "Max Width (mm)", ylab = "Frequency", col = "blue")
hist(ginkgo$max_depth, breaks = 5, main = "Histogram of Leaf Max Depth", xlab = "Max Depth (mm)", ylab = "Frequency", col = "green")
hist(ginkgo$notch_depth, breaks = 5, main = "Histogram of Leaf Notch Depth", xlab = "Notch Depth (mm)", ylab = "Frequency", col = "red")
hist(ginkgo$petiole_length, breaks = 5, main = "Histogram of Petiole Length", xlab = "Petiole Length (mm)", ylab = "Frequency", col = "orange")
```



## Distribution Functions
The following distribution functions allow you to calculate probabilities depending on the type of distribution.

### Normal distributions use the following:

* dnorm() calculates the probability density
  - calculate probability of observing a value, or range of values
* pnorm() calculates the cumulative density
  - calculate the cumulative probability of a value or less; greater than a value
* qnorm() is the inverse of the cumulative distribution function. Q stands for quantile.
  - calculate what length will 90% of all fishes be shorter than, for example 
  

```{r}
# dnorm example: calculating the probability of observing a 3. 
dnorm(3, mean = 0, sd =1)

# pnorm example: calculating the probability of observing a 3 or less
pnorm(3, mean = 0, sd = 1, lower.tail = TRUE)

# qnorm example: calculating the 85th percentile of the values in a population that has a mean of 110 and a standard deviation of 4
qnorm(0.85, mean = 110, sd = 4)

```


### Binomial distributions use the following:

* dbinom() is the density function for binomial distributions.
  - calculate the probability of getting a certain number of successes (x) in a certain number of trails (size) with a given fixed probability of success for each trial (prob)
* pbinom() is the cumulative distribution function for binomial distributions.
  - calculate the area to the left (or to the right with argument lower.tail = FALSE) of a random value (q) given the number of trials (size), and probability of success (prob)
* qbinom() is the inverse CDF function for binomial distributions. It allows you to calculate quantiles. 
  - calculate the quantile of the binomial distribution

```{r}
# dbinom example: calculating the probability of 10 successes in 100 trials when the probability of success is 0.5
dbinom(x = 10, size = 100, prob = 0.5)

# pbinom example: calculating the probability of more than 2 successes during 10 trials where the probability of success for each trial is 0.6
pbinom(2, size =10, prob = 0.5, lower.tail = FALSE)

# qbinom example: calculate the 15th quantile of a binomial distribution with 20 trials and a probability of success of 0.5
qbinom(0.15, size = 20, prob = 0.5)
```

