setwd("C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/ForestMeasurements/Exercises/AppliedExercise1")
# Load tree data
tree_dat <- read.table("lab_tree_dat.csv", header = TRUE, sep = ",")
#Load volume data
vol_dat <- read.table("vol_table.csv", header = TRUE, sep = ",")
#Calculate average DBH for tape per tree
tree_dat$dbh_tape_avg <- rowMeans(tree_dat[, c(3,4)], na.rm=FALSE)
tape_mean <- mean(tree_dat$dbh_tape_avg)
#Calculate average caliper DBH per tree
tree_dat$dbh_cal_avg <- rowMeans(tree_dat[, c(5,6)], na.rm=FALSE)
cal_mean <- mean(tree_dat$dbh_cal_avg)
#Calculate average Biltmore stick DBH per tree, rounded to nearest integer value
tree_dat$dbh_bs_avg <- round(rowMeans(tree_dat[, c(7,8)], na.rm=TRUE), 0)
bs_mean <- round(mean(tree_dat$dbh_bs_avg, na.rm = TRUE), 0)
#Create table of average DBH measurements across three tools
dbh_avgs <- data.frame(
"Device" = c("DBH Tape", "Calipers", "Biltmore Stic"),
"AverageDBHinches" = c(tape_mean, cal_mean, bs_mean)
)
# Define forester's constant
fc <-pi/(4*144)
# Calculate average basal area per tree using d-tape average DBH
tree_dat$ba_tape_avg <- (tree_dat$dbh_tape_avg^2) * fc
# Create indices for each unique species
Ind_AceRub <- tree_dat[tree_dat$Species == "AceRub",]
Ind_BetAll <- tree_dat[tree_dat$Species == "BetAll",]
Ind_BetLen <- tree_dat[tree_dat$Species == "BetLen",]
Ind_BetPap <- tree_dat[tree_dat$Species == "BetPap",]
Ind_BetUnk <- tree_dat[tree_dat$Species == "BetUnk",]
Ind_BetVib <- tree_dat[tree_dat$Species == "BetVib",]
Ind_FraAme <- tree_dat[tree_dat$Species == "FraAme",]
Ind_FraPen <- tree_dat[tree_dat$Species == "FraPen",]
Ind_FraUnk <- tree_dat[tree_dat$Species == "FraUnk",]
Ind_PinRub <- tree_dat[tree_dat$Species == "PinRub",]
Ind_PinStr <- tree_dat[tree_dat$Species == "PinStr",]
Ind_QueNig <- tree_dat[tree_dat$Species == "QueNig",]
Ind_QueRub <- tree_dat[tree_dat$Species == "QueRub",]
Ind_QueUnk <- tree_dat[tree_dat$Species == "QueUnk",]
Ind_QueVel <- tree_dat[tree_dat$Species == "QueVel",]
Ind_TsuCan <- tree_dat[tree_dat$Species == "TsuCan",]
# Create a data frame with each species, basal area for each species, and tree count.
Question2_Species_BA <- data.frame ("Species" = c("Acer rubrum", "Betula alleghaniensis", "Betula lenta", "Betula papyrifera",
"Betula unknown", "Betula viburnum", "Fraxinus americana", "Fraxinus pennsylvanica", "Fraxinus unknown",
"Pinus rubra", "Pinus strobus", "Quercus nigra", "Quercus rubra", "Quercus unknown",
"Quercus velutina", "Tsuga canadensis"),
"Number of Trees" = c(
(nrow(Ind_AceRub)), (nrow(Ind_BetAll)), (nrow(Ind_BetLen)), (nrow(Ind_BetPap)), (nrow(Ind_BetUnk)),
(nrow(Ind_BetVib)), (nrow(Ind_FraAme)), (nrow(Ind_FraPen)), (nrow(Ind_FraUnk)), (nrow(Ind_PinRub)), (nrow(Ind_PinStr)),
(nrow(Ind_QueNig)), (nrow(Ind_QueRub)), (nrow(Ind_QueUnk)), (nrow(Ind_QueVel)), (nrow(Ind_TsuCan))),
"Total Basal Area (sq. ft.)" = c((sum(Ind_AceRub$ba_tape_avg)), (sum(Ind_BetAll$ba_tape_avg)),
(sum(Ind_BetLen$ba_tape_avg)), (sum(Ind_BetPap$ba_tape_avg)),
(sum(Ind_BetUnk$ba_tape_avg)), (sum(Ind_BetVib$ba_tape_avg)),
(sum(Ind_FraAme$ba_tape_avg)), (sum(Ind_FraPen$ba_tape_avg)),
(sum(Ind_FraUnk$ba_tape_avg)), (sum(Ind_PinRub$ba_tape_avg)), (sum(Ind_PinStr$ba_tape_avg)),
(sum(Ind_QueNig$ba_tape_avg)), (sum(Ind_QueRub$ba_tape_avg)),
(sum(Ind_QueUnk$ba_tape_avg)), (sum(Ind_QueVel$ba_tape_avg)),
(sum(Ind_TsuCan$ba_tape_avg))))
# Check to make sure Question 2 table created is true
Question2_Species_BA[1,3]==(sum(Ind_AceRub$ba_tape_avg))
Question2_Species_BA[16,3]==(sum(Ind_TsuCan$ba_tape_avg))
#Logic test was successful. Install package to export to excel.
install.packages("writexl")
# Load in writexl package
library("writexl")
# Export Question 2 table to excel
write_xlsx(Question2_Species_BA, "C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/ForestMeasurements/Exercises/AppliedExercise1/Question2TableSums.xlsx")
# Create crown class indices
Ind_CwnCls_C <- tree_dat[tree_dat$CC=="C",]
Ind_CwnCls_D <- tree_dat[tree_dat$CC=="D",]
Ind_CwnCls_I <- tree_dat[tree_dat$CC=="I",]
Ind_CwnCls_S <- tree_dat[tree_dat$CC=="S",]
# Create data frame for crown class and avg DBH d-tape measurements
Question3_CrwnCls_avgDBH <- data.frame("Crown Class" = c("Dominant", "CoDominant", "Intermediate", "Suppressed"),
"Average DBH (inches)" = c((mean(Ind_CwnCls_D$dbh_tape_avg)), (mean(Ind_CwnCls_C$dbh_tape_avg)), (mean(Ind_CwnCls_I$dbh_tape_avg)), (mean(Ind_CwnCls_S$dbh_tape_avg))))
# Export Question 3 table to excel to paste into Word
write_xlsx(Question3_CrwnCls_avgDBH, "C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/ForestMeasurements/Exercises/AppliedExercise1/Question3TableCCs.xlsx")
# Calculate average height for each tree, rounding down to nearest half log
tree_dat$ht_avg <-((tree_dat$ht_r1 + tree_dat$ht_r1.1)/2)
tree_dat$ht_avg <- floor(tree_dat$ht_avg/0.5)*0.5
# Install and load in dplyr package
install.packages("dplyr")
library(dplyr)
# Get column names to match to do join
tree_dat$D_class <- tree_dat$dbh_bs_avg
View(vol_dat)
# Join volume parameters to tree_dat
tree_dat <- join(tree_dat, vol_dat, by = "D_class")
# Create indices for each unique species so that volume data will be included from join
Ind_AceRub <- tree_dat[tree_dat$Species == "AceRub",]
Ind_BetAll <- tree_dat[tree_dat$Species == "BetAll",]
Ind_BetLen <- tree_dat[tree_dat$Species == "BetLen",]
Ind_BetPap <- tree_dat[tree_dat$Species == "BetPap",]
Ind_BetUnk <- tree_dat[tree_dat$Species == "BetUnk",]
Ind_BetVib <- tree_dat[tree_dat$Species == "BetVib",]
Ind_FraAme <- tree_dat[tree_dat$Species == "FraAme",]
Ind_FraPen <- tree_dat[tree_dat$Species == "FraPen",]
Ind_FraUnk <- tree_dat[tree_dat$Species == "FraUnk",]
Ind_PinRub <- tree_dat[tree_dat$Species == "PinRub",]
Ind_PinStr <- tree_dat[tree_dat$Species == "PinStr",]
Ind_QueNig <- tree_dat[tree_dat$Species == "QueNig",]
Ind_QueRub <- tree_dat[tree_dat$Species == "QueRub",]
Ind_QueUnk <- tree_dat[tree_dat$Species == "QueUnk",]
Ind_QueVel <- tree_dat[tree_dat$Species == "QueVel",]
Ind_TsuCan <- tree_dat[tree_dat$Species == "TsuCan",]
# Create table for Question 4 of species and average volume
Question4_Spc_Vol <- ddply(tree_dat, .(Species), summarize, vol = round(mean(vol, na.rm = TRUE), 1))
# Export Question 4 table to excel to copy for word
write_xlsx(Question4_Spc_Vol, "C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/ForestMeasurements/Exercises/AppliedExercise1/Question4TableVols.xlsx")
knitr::opts_chunk$set(echo = TRUE)
require(palmerpenguins)
hist(penguins$body_mass_g)
```{r histogram_1}
```{r histogram_1}
require(palmerpenguins)
hist(penguins$body_mass_g)
knitr::opts_chunk$set(echo = TRUE)
require(palmerpenguins)
hist(penguins$body_mass_g)
knitr::opts_chunk$set(echo = TRUE)
require(palmerpenguins)
hist(penguins$body_mass_g)
par(mfrow = c(2, 2))
hist(
penguins$body_mass_g,
main = "Histogram of Body Mass",
xlab = "Body Mass (g)")
hist(
penguins$flipper_length_mm,
main = "Histogram of Flipper Length",
xlab = "Flipper Length (mm)")
boxplot(
body_mass_g ~ species, data = penguins,
main = "Body Mass and Species",
ylab = "Body Mass (g)"
)
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
```{r mulit_panel_2, echo = FALSE, fig.width=7, fig.height = 10}
par(mfrow = c(2, 2))
hist(
penguins$body_mass_g,
main = "Histogram of Body Mass",
xlab = "Body Mass (g)")
hist(
penguins$flipper_length_mm,
main = "Histogram of Flipper Length",
xlab = "Flipper Length (mm)")
boxplot(
body_mass_g ~ species, data = penguins,
main = "Body Mass and Species",
ylab = "Body Mass (g)"
)
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
Here's a numbered list:
1. Item 1
1. Item 2
1. Item 3
1. **Item 4** (in bold)
## Tab 3
Here's a numbered list:
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
# Check what is working directory
getwd()
# Load in data
hab_sta <- read.csv(here("DataExplorationDetFunctions", "hab.sta.csv"))
# Load here function
load(here)
# Load here function
load("here")
# Load here function
install.package("here")
# Load here function
install.packages("here")
# Load in here function
library(here)
# Load in data
hab_sta <- read.csv(here("DataExplorationDetFunctions", "hab.sta.csv"))
# Load in data
hab_sta <- read.csv(here("Data", "hab.sta.csv"))
# Load in data
dat_habitat <- read.csv(here("Data", "hab.sta.csv"))
?dbinom
# Question 2
Quest2Prob4of6 <- dbinom(0:6,6,4/6)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
?dbinom
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(n = 4, p = c(0.125, .875))
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(p = c(0.125, .875), n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(p = 0.75, n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(x = 0:4, p = 0.75, n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(x = 3, n = 4, p = 0.75)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(3, 4, 0.75)
#Q1: Probability of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(3, 4, 0.75, log = FALSE)
?pbinom
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
pbinom(q = 0:3, size = 4, prob = 0.75, log.p = FALSE)
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
sum(pbinom(q = 0:3, size = 4, prob = 0.75, log.p = FALSE))
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
pbinom(q = 3, size = 4, prob = 0.75, log.p = FALSE)
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
(pbinom(q = 4, size = 5, prob = 0.75, log.p = FALSE)) + (pbinom(q =5, size = 5, prob = 0.75, log.p = FALSE))
# Question 4
Que4 <- pbinom(q = 4, size = 6, prob = 2/3, lower.tail = TRUE, log.p = FALSE)
#Question 5
Que5 <- pbinom(q = 4, size = 6, prob = 2/3, lower.tail = FALSE, log.p = FALSE)
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
1 - (pbinom(q = 4, size = 5, prob = 0.75, log.p = FALSE))
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
1 - (pbinom(q = 3, size = 5, prob = 0.75, log.p = FALSE))
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
?pnorm
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
1 - pnorm(1.2, mean = 2, sd =2)
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
pnorm(1.2, mean = 2, sd =2)
#Q5: Prob of observing value greater than 1.2 from norm distrib mean = 2 and SD  = 23
1 - pnorm(1.2, mean = 2, sd =2)
#Q6: Prob observing value between 1.2 and 3.2 norm distrib with mean of 2 and SD of 2
(1 - pnorm(1.2, mean = 2, sd =2)) - (1 - pnorm(3.2, mean = 2, sd =2))
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25*25*25
410*40*81
1328400/1312000
1.0125 * 1312000
25^1328400 / 25^1312000
B= 25^1312000
A =25^1328400
A/B
1328400 - 1312000
# Creat box plot
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "body mass (g)")
dat_ade = droplevels(subset(penguins, species == "Adelie"))
dat_ade$sex <- as.factor(dat_ade$sex)
levels(dat_ade$sex) <- c("F","M")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex,
main = "Boxplots of Penguin Body Mass by Sex",
ylab = "Body mass (g)",
xlab = "Sex")
# Question 2: t test
femalepen=subset(dat_ade,sex== "female" )
malepen=subset(dat_ade,sex== "male" )
View(dat_ade)
# Question 2: t test
femalepen=subset(dat_ade,sex== "F" )
malepen=subset(dat_ade,sex== "M" )
# Creat box plot
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "body mass (g)")
dat_ade = droplevels(subset(penguins, species == "Adelie"))
dat_ade$sex <- as.factor(dat_ade$sex)
levels(dat_ade$sex) <- c("F","M")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex,
main = "Boxplots of Penguin Body Mass by Sex",
ylab = "Body mass (g)",
xlab = "Sex")
# Question 2: t test
#Subset male and female
femalepen=subset(dat_ade,sex== "F" )
?ttest
?t.test
t.test(femalepen$body_mass_g, y = NULL, alternative = c("one.sided", "greater"), mu = 0, paired = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = c("one.sided", "greater"), mu = 0, paired = FALSE, var.equal = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = c("two.sided", "greater"), mu = 0, paired = FALSE, var.equal = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = "greater", mu = 0, paired = FALSE, var.equal = FALSE)
#Question 3: t test with male
malepen=subset(dat_ade,sex== "M" )
t.test(malepen$body_mass_g, y = NULL, alternative = "greater", mu = 4000, paired = FALSE, var.equal = FALSE)
#Question 6: male and female penguins
t.test(femalepen$body_mass_g, malepen$body_mass_g)
#Question 8: males and females directional
t.test(malepen$body_mass_g, femalepen$body_mass_g, alternative = "greater", paired = TRUE, var.equal = FALSE)
data(iris)
#Fit the linear model of sepal length as predicted by species
fit_species =
lm(
Sepal.Length ~ Species,
data = iris)
# and the model coefficient table
summary(fit_species)
View(iris)
#Create conditional box plot
plot(
Sepal.Length ~ Species,
data = iris,)
#Create conditional box plot
boxplot(
Sepal.Length ~ Species,
data = iris,)
#Create conditional box plot
boxplot(
Sepal.Length ~ Species,
data = iris,
ylab = "Sepal Length (cm)",
xlab = "Species")
# test normality of residuals
?residuals
residuals(fit_species)
?shapiro.test
shapiro.test(residuals(fit_species))
# petal length and width model now
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
fit_petals =
lm(
Petal.Width ~ Petal.Length,
data = iris)
summary(fit_petals)
#set working directory
getwd
#set working directory
getwd()
#load in data
library("catrate")
#load in data
read.csv("catrate")
#load in data
data(catrate)
View(catrate)
#load in data
catrate <- read.csv(catrate.csv, header = TRUE, sep = ",")
#load in data
catrate <- read.csv("catrate.csv", header = TRUE, sep = ",")
#set working directory
setwd("C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/environmental_data,/data")
#load in data
catrate <- read.csv("catrate.csv", header = TRUE, sep = ",")
#load in data
catrates <- read.csv("catrate.csv", header = TRUE, sep = ",")
getwd()
#load in data
catrate <- read.csv("data/catrate.csv", header = TRUE, sep = ",")
#Look at first few row
head(catrate)
#Look at summary
summary(catrate)
#Plot histogram of cat.rate column
?hist
#Plot histogram of cat.rate column
hist(catrate$cat.rate, main = "Histogram of Catastrophe Rates", xlab = "Catastrophe Rate", ylab = "Frequency")
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[c(cat.rate)]
View(catrate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[4,]
View(cat.rate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[,4]
#load in data
catrate <- read.csv("data/catrate.csv", header = TRUE, sep = ",")
#Look at first few row
head(catrate)
#Look at summary
summary(catrate)
#Plot histogram of cat.rate column
hist(catrate$cat.rate, main = "Histogram of Catastrophe Rates", xlab = "Catastrophe Rate", ylab = "Frequency")
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[,4]
print(cat.rate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate$cat.rate
#Run shapiro test
shapiro.test(catrate$cat.rate)
?shapiro.text
?t.test
#t test  of the alternative hypothesis that the catastrophic rate is different from the pond late-filling rate.
t.test(catrate$cat.rate, alternative = "two.sided", mu = 2/7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
#t test with greater, one tailed
t.test(catrate$cat.rate, alternative = "greater", mu = 2/7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
?wilcox.test
#Run shapiro test
shapiro.test(residuals(catrate$cat.rate))
#Run shapiro test
shapiro.test(residuals(catrate$cat.rate))
#Comparing two sample means with Palmer Penguins
require(palmerpenguins)
#Comparing two sample means with Palmer Penguins
require(palmerpenguins)
#subset palmer penguins data
penguin_dat = droplevels(subset(penguins, species != "Gentoo"))
#summary of penguin dat
summary(penguin_dat)
#visualize flipper length in mm via boxplot
boxplot(
flipper_length_mm ~ species,
data = penguin_dat,
ylab = "Flipper Length (mm)")
# Extract the Adelie penguin data
dat_adelie = subset(penguin_dat, species == "Adelie")
#Extract chinstrap
dat_chinstrap = subset(penguin_dat, species == "Chinstrap")
#extract gentoo
dat_gentoo = subset (penguin_dat, species == "Gentoo")
#test normality of each species
shapiro.test(dat_adelie)
View(dat_adelie)
#test normality of each species
shapiro.test(dat_adelie$flipper_length_mm)
shapiro.test(dat_chinstrap$flipper_length_mm)
shapiro.test(dat_gentoo$flipper_length_mm)
#t test on penguins
?t.test
#t test on penguins
t.test(dat_adelie$flipper_length_mm, y = dat_chinstrap$flipper_length_mm, alternative = "two.sided", mu = 0)
#create histograms
?par
par(mfcol = c(2, 0))
par(mfrow = c(2,1))
hist(dat_adelie$flipper_length_mm, main = "Histogram of Adelie Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm, main = "Histogram of Chinstrap Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
par(mfrow = c(1,2))
hist(dat_adelie$flipper_length_mm, main = "Histogram of Adelie Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm, main = "Histogram of Chinstrap Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
#load in ginko
read.csv("ginko_data_2022")
#load in ginko
read.csv("data/ginko_data_2022")
?read.csv
#load in ginko
read.csv("data/ginko_data_2022", header = TRUE, sep = ",")
#load in ginko
ginko = read.csv(here("data","ginko_data_2022.csv"))
#load in ginko
require(here)
ginko = read.csv(here("data","ginko_data_2022.csv"))
#load in ginko
gingko <- read.csv("data/gingko_data_2022.csv", header = TRUE, sep = ",")
#load in ginko
ginkgo <- read.csv("data/ginkgo_data_2022.csv", header = TRUE, sep = ",")
#how many trees were sampled
unique(subset(ginko, seeds_present, site_id))
#how many trees were sampled
unique(subset(gingko, seeds_present, site_id))
#how many trees were sampled
unique(subset(ginkgo, seeds_present, site_id))
View(ginkgo)
#how many trees were sampled
unique(subset(ginkgo, seeds_present))
#how many trees were sampled
nrow(unique(subset(ginkgo, seeds_present)))
#how many trees were sampled
(nrow(ginkgo))/10
#how many trees had seeds
sum(ginko$seeds_present=="TRUE")/10
#how many trees had seeds
sum(ginkgo$seeds_present=="TRUE")/10
#how many trees were sampled (divide by 10 because 10 leaves per tree)
(nrow(ginkgo))/10
#load in ginkgo
ginkgo <- read.csv("data/ginkgo_data_2022.csv", header = TRUE, sep = ",")
#how many trees were sampled (divide by 10 because 10 leaves per tree)
(nrow(ginkgo))/10
#how many trees had seeds
sum(ginkgo$seeds_present=="TRUE")/10
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width)
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width)
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width, xlab = "Max Width", ylab = "Max Depth")
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width, xlab = "Max Depth", ylab = "Max Width")
