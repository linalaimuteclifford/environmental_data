xlab = "Flipper Length (mm)")
boxplot(
body_mass_g ~ species, data = penguins,
main = "Body Mass and Species",
ylab = "Body Mass (g)"
)
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
Here's a numbered list:
1. Item 1
1. Item 2
1. Item 3
1. **Item 4** (in bold)
## Tab 3
Here's a numbered list:
boxplot(
flipper_length_mm ~ species, data = penguins,
main = "Flipper Length and Species",
ylab = "Flipper Length (mm)"
)
# Check what is working directory
getwd()
# Load in data
hab_sta <- read.csv(here("DataExplorationDetFunctions", "hab.sta.csv"))
# Load here function
load(here)
# Load here function
load("here")
# Load here function
install.package("here")
# Load here function
install.packages("here")
# Load in here function
library(here)
# Load in data
hab_sta <- read.csv(here("DataExplorationDetFunctions", "hab.sta.csv"))
# Load in data
hab_sta <- read.csv(here("Data", "hab.sta.csv"))
# Load in data
dat_habitat <- read.csv(here("Data", "hab.sta.csv"))
?dbinom
# Question 2
Quest2Prob4of6 <- dbinom(0:6,6,4/6)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
?dbinom
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(n = 4, p = c(0.125, .875))
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(p = c(0.125, .875), n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(p = 0.75, n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(x = 0:4, p = 0.75, n = 4)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(x = 3, n = 4, p = 0.75)
#Q1: Probabtiliy of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(3, 4, 0.75)
#Q1: Probability of observing count of exactly 3 successes in binomial distribution with n =4 p = 0.75
dbinom(3, 4, 0.75, log = FALSE)
?pbinom
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
pbinom(q = 0:3, size = 4, prob = 0.75, log.p = FALSE)
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
sum(pbinom(q = 0:3, size = 4, prob = 0.75, log.p = FALSE))
#Q2: Probability of observing count of 3 successes or fewer, binomial distribution  = 4 and p = 0.75
pbinom(q = 3, size = 4, prob = 0.75, log.p = FALSE)
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
(pbinom(q = 4, size = 5, prob = 0.75, log.p = FALSE)) + (pbinom(q =5, size = 5, prob = 0.75, log.p = FALSE))
# Question 4
Que4 <- pbinom(q = 4, size = 6, prob = 2/3, lower.tail = TRUE, log.p = FALSE)
#Question 5
Que5 <- pbinom(q = 4, size = 6, prob = 2/3, lower.tail = FALSE, log.p = FALSE)
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
1 - (pbinom(q = 4, size = 5, prob = 0.75, log.p = FALSE))
#Q3: Probability observing more than 3 successes in binomial distribution with n=5, p =0.75
1 - (pbinom(q = 3, size = 5, prob = 0.75, log.p = FALSE))
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
?pnorm
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
1 - pnorm(1.2, mean = 2, sd =2)
#Q4: Prob of observing value less than 1.2 from norm distrib mean = 2 and SD  = 23
pnorm(1.2, mean = 2, sd =2)
#Q5: Prob of observing value greater than 1.2 from norm distrib mean = 2 and SD  = 23
1 - pnorm(1.2, mean = 2, sd =2)
#Q6: Prob observing value between 1.2 and 3.2 norm distrib with mean of 2 and SD of 2
(1 - pnorm(1.2, mean = 2, sd =2)) - (1 - pnorm(3.2, mean = 2, sd =2))
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25^3
#Q12: How many 3 character words are possible library of babel
25*25*25
410*40*81
1328400/1312000
1.0125 * 1312000
25^1328400 / 25^1312000
B= 25^1312000
A =25^1328400
A/B
1328400 - 1312000
# Creat box plot
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "body mass (g)")
dat_ade = droplevels(subset(penguins, species == "Adelie"))
dat_ade$sex <- as.factor(dat_ade$sex)
levels(dat_ade$sex) <- c("F","M")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex,
main = "Boxplots of Penguin Body Mass by Sex",
ylab = "Body mass (g)",
xlab = "Sex")
# Question 2: t test
femalepen=subset(dat_ade,sex== "female" )
malepen=subset(dat_ade,sex== "male" )
View(dat_ade)
# Question 2: t test
femalepen=subset(dat_ade,sex== "F" )
malepen=subset(dat_ade,sex== "M" )
# Creat box plot
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "body mass (g)")
dat_ade = droplevels(subset(penguins, species == "Adelie"))
dat_ade$sex <- as.factor(dat_ade$sex)
levels(dat_ade$sex) <- c("F","M")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex,
main = "Boxplots of Penguin Body Mass by Sex",
ylab = "Body mass (g)",
xlab = "Sex")
# Question 2: t test
#Subset male and female
femalepen=subset(dat_ade,sex== "F" )
?ttest
?t.test
t.test(femalepen$body_mass_g, y = NULL, alternative = c("one.sided", "greater"), mu = 0, paired = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = c("one.sided", "greater"), mu = 0, paired = FALSE, var.equal = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = c("two.sided", "greater"), mu = 0, paired = FALSE, var.equal = FALSE)
t.test(femalepen$body_mass_g, y = NULL, alternative = "greater", mu = 0, paired = FALSE, var.equal = FALSE)
#Question 3: t test with male
malepen=subset(dat_ade,sex== "M" )
t.test(malepen$body_mass_g, y = NULL, alternative = "greater", mu = 4000, paired = FALSE, var.equal = FALSE)
#Question 6: male and female penguins
t.test(femalepen$body_mass_g, malepen$body_mass_g)
#Question 8: males and females directional
t.test(malepen$body_mass_g, femalepen$body_mass_g, alternative = "greater", paired = TRUE, var.equal = FALSE)
data(iris)
#Fit the linear model of sepal length as predicted by species
fit_species =
lm(
Sepal.Length ~ Species,
data = iris)
# and the model coefficient table
summary(fit_species)
View(iris)
#Create conditional box plot
plot(
Sepal.Length ~ Species,
data = iris,)
#Create conditional box plot
boxplot(
Sepal.Length ~ Species,
data = iris,)
#Create conditional box plot
boxplot(
Sepal.Length ~ Species,
data = iris,
ylab = "Sepal Length (cm)",
xlab = "Species")
# test normality of residuals
?residuals
residuals(fit_species)
?shapiro.test
shapiro.test(residuals(fit_species))
# petal length and width model now
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
fit_petals =
lm(
Petal.Width ~ Petal.Length,
data = iris)
summary(fit_petals)
#set working directory
getwd
#set working directory
getwd()
#load in data
library("catrate")
#load in data
read.csv("catrate")
#load in data
data(catrate)
View(catrate)
#load in data
catrate <- read.csv(catrate.csv, header = TRUE, sep = ",")
#load in data
catrate <- read.csv("catrate.csv", header = TRUE, sep = ",")
#set working directory
setwd("C:/Users/linac/OneDrive - University of Massachusetts/Courses/Fall2022/environmental_data,/data")
#load in data
catrate <- read.csv("catrate.csv", header = TRUE, sep = ",")
#load in data
catrates <- read.csv("catrate.csv", header = TRUE, sep = ",")
getwd()
#load in data
catrate <- read.csv("data/catrate.csv", header = TRUE, sep = ",")
#Look at first few row
head(catrate)
#Look at summary
summary(catrate)
#Plot histogram of cat.rate column
?hist
#Plot histogram of cat.rate column
hist(catrate$cat.rate, main = "Histogram of Catastrophe Rates", xlab = "Catastrophe Rate", ylab = "Frequency")
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[c(cat.rate)]
View(catrate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[4,]
View(cat.rate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[,4]
#load in data
catrate <- read.csv("data/catrate.csv", header = TRUE, sep = ",")
#Look at first few row
head(catrate)
#Look at summary
summary(catrate)
#Plot histogram of cat.rate column
hist(catrate$cat.rate, main = "Histogram of Catastrophe Rates", xlab = "Catastrophe Rate", ylab = "Frequency")
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate[,4]
print(cat.rate)
#Check for normality--Shapiro Test
#First, subset just cat.rate column
cat.rate <- catrate$cat.rate
#Run shapiro test
shapiro.test(catrate$cat.rate)
?shapiro.text
?t.test
#t test  of the alternative hypothesis that the catastrophic rate is different from the pond late-filling rate.
t.test(catrate$cat.rate, alternative = "two.sided", mu = 2/7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
#t test with greater, one tailed
t.test(catrate$cat.rate, alternative = "greater", mu = 2/7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
#Wilcox test
wilcox.test(catrate$cat.rate, mu = 2 / 7)
?wilcox.test
#Run shapiro test
shapiro.test(residuals(catrate$cat.rate))
#Run shapiro test
shapiro.test(residuals(catrate$cat.rate))
#Comparing two sample means with Palmer Penguins
require(palmerpenguins)
#Comparing two sample means with Palmer Penguins
require(palmerpenguins)
#subset palmer penguins data
penguin_dat = droplevels(subset(penguins, species != "Gentoo"))
#summary of penguin dat
summary(penguin_dat)
#visualize flipper length in mm via boxplot
boxplot(
flipper_length_mm ~ species,
data = penguin_dat,
ylab = "Flipper Length (mm)")
# Extract the Adelie penguin data
dat_adelie = subset(penguin_dat, species == "Adelie")
#Extract chinstrap
dat_chinstrap = subset(penguin_dat, species == "Chinstrap")
#extract gentoo
dat_gentoo = subset (penguin_dat, species == "Gentoo")
#test normality of each species
shapiro.test(dat_adelie)
View(dat_adelie)
#test normality of each species
shapiro.test(dat_adelie$flipper_length_mm)
shapiro.test(dat_chinstrap$flipper_length_mm)
shapiro.test(dat_gentoo$flipper_length_mm)
#t test on penguins
?t.test
#t test on penguins
t.test(dat_adelie$flipper_length_mm, y = dat_chinstrap$flipper_length_mm, alternative = "two.sided", mu = 0)
#create histograms
?par
par(mfcol = c(2, 0))
par(mfrow = c(2,1))
hist(dat_adelie$flipper_length_mm, main = "Histogram of Adelie Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm, main = "Histogram of Chinstrap Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
par(mfrow = c(1,2))
hist(dat_adelie$flipper_length_mm, main = "Histogram of Adelie Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm, main = "Histogram of Chinstrap Flipper Length",
xlab = "Flipper Length (mm)", ylab = "Frequency")
#load in ginko
read.csv("ginko_data_2022")
#load in ginko
read.csv("data/ginko_data_2022")
?read.csv
#load in ginko
read.csv("data/ginko_data_2022", header = TRUE, sep = ",")
#load in ginko
ginko = read.csv(here("data","ginko_data_2022.csv"))
#load in ginko
require(here)
ginko = read.csv(here("data","ginko_data_2022.csv"))
#load in ginko
gingko <- read.csv("data/gingko_data_2022.csv", header = TRUE, sep = ",")
#load in ginko
ginkgo <- read.csv("data/ginkgo_data_2022.csv", header = TRUE, sep = ",")
#how many trees were sampled
unique(subset(ginko, seeds_present, site_id))
#how many trees were sampled
unique(subset(gingko, seeds_present, site_id))
#how many trees were sampled
unique(subset(ginkgo, seeds_present, site_id))
View(ginkgo)
#how many trees were sampled
unique(subset(ginkgo, seeds_present))
#how many trees were sampled
nrow(unique(subset(ginkgo, seeds_present)))
#how many trees were sampled
(nrow(ginkgo))/10
#how many trees had seeds
sum(ginko$seeds_present=="TRUE")/10
#how many trees had seeds
sum(ginkgo$seeds_present=="TRUE")/10
#how many trees were sampled (divide by 10 because 10 leaves per tree)
(nrow(ginkgo))/10
#load in ginkgo
ginkgo <- read.csv("data/ginkgo_data_2022.csv", header = TRUE, sep = ",")
#how many trees were sampled (divide by 10 because 10 leaves per tree)
(nrow(ginkgo))/10
#how many trees had seeds
sum(ginkgo$seeds_present=="TRUE")/10
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width)
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width)
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width, xlab = "Max Width", ylab = "Max Depth")
#scatter of max leaf depth and max leaf width
plot(ginkgo$max_depth~ginkgo$max_width, xlab = "Max Depth", ylab = "Max Width")
# R Reference Guide {.tabset .tabset-pills}
## Loading Data and Packages
## Data Structures
## Subsetting
## Numerical Data Exploration
## Graphical Data Exploration
## Graphical Data Exploration
## Distribution Functions
knitr::opts_chunk$set(echo = TRUE)
# Load in the here package using the library() function
library(here)
# Load in the here package using the library() function
require(here)
require(palmerpenguins)
# Load in those same two packages, but using the library() function
library(here)
library(palmerpenguins)
# Load in the 2021 ginkgo data to create a data frame called ginkgo
ginko <- read.csv(here("data", "ginkgo_data_2021.csv"))
The length() function can be used to
?length
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13)
#Determine length of num_vec
length(num_vec)
#Create a matrix from the num_vec vector
matrix(num_vec)
#Create a matrix from the num_vec vector
matrix(num_vec, nrow = 3, ncol = 2)
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13, 14)
## Typing the name of the vector into the console prints the contents
num_vec
## The print() function accomplishes the same task:
print(char_vec)
## Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
## Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
## Typing the name of the vector into the console prints the contents
num_vec
## The print() function accomplishes the same task:
print(char_vec)
#Determine length of num_vec
length(num_vec)
#Create a matrix from the num_vec vector
matrix(num_vec, nrow = 3, ncol = 2)
## Create a vector of characters:
char_vec = c("a", "fish", "data is cool", "tree", "b", "love stats")
## The print() function accomplishes the same task:
print(char_vec)
#Combine char_vec and num_vec
data.frame(char_vec, num_vec)
# Get palmer penguins data
require(palmerpenguins)
data("penguins")
# t test
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
# try t test again, test if flip length is equal to 218
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218
)
# one tailed t test thta flip length smaller than 218
t.test(
x = subset(penguins, species == "Gentoo")$flipper_length_mm,
mu = 218,
alternative = "less"
)
# 2 sample t test, flip length two species
t.test(flipper_length_mm ~ species, data = subset(penguins, species != "Chinstrap"))
# 2 sample t test, flip length two species
t.test(flipper_length_mm ~ species, data = subset(penguins, species != "Chinstrap"))
# one way ANOVA: graphical exploration using histograms and density plots
par(mfrow = c(1, 2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na.rm = TRUE), main = "density plot of body mass")
# one way ANOVA: graphical exploration using histograms and density plots
par(mfrow = c(1, 2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na.rm = TRUE), main = "density plot of body mass")
boxplot(body_mass_g ~ species, data = penguins)
boxplot(body_mass_g ~ species ~ sex, data = penguins)
boxplot(body_mass_g ~ species*sex, data = penguins)
boxplot(body_mass_g ~ species*sex, data = penguins)
boxplot(body_mass_g ~ species*sex, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex")
par(mfrow = c(1, 1))
boxplot(body_mass_g ~ species*sex, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex")
boxplot(body_mass_g ~ sex*species, data = penguins, main = "" ylab = "Body Mass (grams)", xlab = "Species and Sex", names)
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = "female Adelie" "male Adelie" "female Chinstrap" "male Chinstrap" "female Gentoo" "male Gentoo")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = "female Adelie, male Adelie, female Chinstrap, male Chinstrap, female Gentoo, male Gentoo")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex")
boxplotlabels = c("female Adelie", "male Adelie", "female Chinstrap", "male Chinstrap", "female Gentoo", "male Gentoo")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = boxplotlabels)
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = boxplotlabels, las = 2)
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = c("female \n Adelie", "male Adelie", "female Chinstrap", "male Chinstrap", "female Gentoo", "male Gentoo", las = 2)
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = c("female \n Adelie", "male \n Adelie", "female Chinstrap", "male Chinstrap", "female Gentoo", "male Gentoo", las = 2)
boxplotlabels = c("female\nAdelie", "male Adelie", "female Chinstrap", "male Chinstrap", "female Gentoo", "male Gentoo")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = boxplotlabels, las = 2)
boxplotlabels = c("female\nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo")
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = boxplotlabels, las = 2)
boxplot(body_mass_g ~ sex*species, data = penguins, ylab = "Body Mass (grams)", xlab = "Species and Sex", names = boxplotlabels, las = 1)
# conditional boxplot for mass and species
require(palmerpenguins)
boxplot(body_mass_g ~ species, data = penguins)
# test normality assumption:
# extract measurements for each species
dat_chinstrap = subset(penguins, species == "Chinstrap")
dat_gentoo = subset(penguins, species == "Gentoo")
dat_adelie = subset(penguins, species == "Adelie")
#calculate mean body mass each species
mean(dat_chinstrap$body_mass_g, na.rm = TRUE)
mean(dat_gentoo$body_mass_g, na.rm = TRUE)
mean(dat_adelie$body_mass_g, na.rm = TRUE)
# conduct shapiro test for each species body mass
shapiro.test(dat_chinstrap$body_mass_g)
shapiro.test(dat_gentoo$body_mass_g)
shapiro.test(dat_adelie$body_mass_g)
# shortcut for calc species mean body masses using aggregate function
aggregate(body_mass_g ~ species, data = penguins, FUN = mean)
# fit linear model
fit_species = lm(body_mass_g ~ species, data = penguins)
#look at model coefficients
summary(fit_species)
# conduct ANOVA on fit_species
anova(fit_species)
#one way ANOVA, use lm function to store model in a variable
fit_species = lm(body_mass_g ~ species, data = penguins)
#look at model coefficients
summary(fit_species)
# r makes easy to conduct an ANOVA
anova(fit_species)
# 2 way ANOVA to see if sex is important to body mass
fit_additive = lm(body_mass_g ~ sex + species, data = penguins)
# 2 way interactive (factorial) ANOVA
fit_interactive = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_interactive)
lm(bill_length_mm ~ body_mass_g, data = penguins)
#Q4. build fit_both with factorial linear model of body mass and sex, species
fit_both = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_interactive)
#Q4. build fit_both with factorial linear model of body mass and sex, species
fit_both = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_both)
#Q8. Observed mean chinstrap female body mass?
dat_chinstrap_female = subset(dat_chinstrap, sex == "female")
View(dat_chinstrap_female)
mean(dat_chinstrap_female$body_mass_g)
